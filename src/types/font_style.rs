
use serde::Deserialize;
use crate::types::AttributeField;

/// Generated by Serde from the `type` sub-field of `marks` list.
#[derive(Debug,Deserialize,PartialEq,Clone)]
pub enum Style {
    /// The bold,italic,underline and strike variations are derived directly from the JSON input
    Normal,
   #[serde(rename = "bold")]
    Bold,
   #[serde(rename = "italic")]
    Italic,
   #[serde(rename = "underline")]
    Underline,
   #[serde(rename = "strike")]
    Strikethrough,
    
    /// The compound types are parsed by the the render engine in `Doc::get_block_font_style`
    BoldItalic,
    BoldUnderline,
    ItalicUnderline,
    BoldItalicUnderline,
    BoldStrikethrough,
    ItalicStrikethrough,
    BoldItalicStrikethrough,
}


#[derive(Default,Debug,Deserialize,PartialEq)]
pub struct FontStyle {
   #[serde(rename = "type")]
    pub name: Option<String>,
   #[serde(rename = "attrs")]
    pub attributes: Option<AttributeField>
}

impl FontStyle {
    pub fn name(&self) -> Option<Style> {
        if let Some(name) = &self.name {
            
            match name.as_str() {
                "bold" => Some(Style::Bold),
                "italic" => Some(Style::Italic),
                "underline" => Some(Style::Underline),
                "strike" => Some(Style::Strikethrough),
                _ => { None }
            }

        } else {
            None
        }
    }

    pub fn attributes(&self) -> Option<&AttributeField> {
        self.attributes.as_ref()
    }
}